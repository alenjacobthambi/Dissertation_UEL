detach (KS13N.London)
# remove all variables from the environment
rm(list=ls())
# read in data from csv file
KS13N.London <- read.csv("04_KS13N_London.csv", stringsAsFactors = FALSE)
head(KS13N.London)    # Inspect top rows of the data
str(KS13N.London)
# make $Region and $Sub_region $Borough as factors
KS13N.London$Region <- factor(KS13N.London$Region)
KS13N.London$Sub_region <- factor(KS13N.London$Sub_region)
KS13N.London$Borough <- factor(KS13N.London$Borough)
str(KS13N.London)
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
KS13N.London$Borough <- factor(KS13N.London$Borough)
str(KS13N.London)
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# label outliers
boxdata <- boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
str(KS13N.London)
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
str(KS13N.London)
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# label outliers
boxdata <- boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# label outliers
boxdata <- boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
#for each outlier in boxdata
for(i in 1:length(boxdata$group)){
#add text to the boxplot
text(boxdata$group[i], boxdata$out[i],
which(KS13N.London$P16plus==boxdata$out[i]),pos=4, cex=1)}
boxplot(KS13N.London$P16plus)
#plot a boxplot with interactions
identify(rep(1, length(KS13N.London$P16plus)), KS13N.London$P16plus, labels = seq_along(KS13N.London$P16plus))
library(TeachingDemos)
# somtimes need to install the package of "rcompanion" here, even not load it
# Load the function
source("https://raw.githubusercontent.com/talgalili/R-code-snippets/master/boxplot.with.outlier.label.r")
boxplot.with.outlier.label(KS13N.London$P16plus, seq_along(KS13N.London$P16plus))
# inspect outliers
KS13N.London[20,]
KS13N.London[92,]
# boxplot for variable of "P16plus" by factor Sub_region
boxplot(KS13N.London$P16plus ~ KS13N.London$Sub_region, xlab="Population 16plus", ylab="Count")
# boxplot for variable of "P16plus" by factor Borough
boxplot(KS13N.London$P16plus ~ KS13N.London$Borough, xlab="Population 16plus", ylab="Count")
# can't read names, so change the margin on the left (no. 2)
# default is c(5, 4, 4, 2) + 0.1
# and shrink text size so we don't need a huge margin
op <- par(mar = c(5, 8, 4, 2) + 0.1)
boxplot(KS13N.London$P16plus ~ KS13N.London$Borough, xlab=" Count of Population 16plus", ylab="",
horizontal = TRUE, las = 1, cex.axis = 0.7, col = "grey")
# reset the plotting parameters
par(op)
# Mean, Std. deviation, Maximum and Minimum of "P16plus"
summary(KS13N.London$P16plus)
summary(KS13N.London)
# Summary statistics printed separately
mean(KS13N.London$P16plus)
sd (KS13N.London$P16plus)
max(KS13N.London$P16plus)
min(KS13N.London$P16plus)
boxplot(KS13N.London$P16plus ~ KS13N.London$Borough, xlab=" Count of Population 16plus", ylab="",
horizontal = TRUE, las = 1, cex.axis = 0.7, col = "grey")
# reset the plotting parameters
par(op)
# Mean, Std. deviation, Maximum and Minimum of "P16plus"
summary(KS13N.London$P16plus)
summary(KS13N.London)
# Summary statistics printed separately
mean(KS13N.London$P16plus)
sd (KS13N.London$P16plus)
max(KS13N.London$P16plus)
min(KS13N.London$P16plus)
# Create percentage of population (p16plus) variables
KS13N.London <- within (KS13N.London, pNoQual <- (NoQual / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel1 <- (Level1 / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel2 <- (Level2 / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel3 <- (Level3 / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel4_5 <- (Level4_5 / P16plus)*100)
KS13N.London <- within (KS13N.London, pOther <- (Other / P16plus)*100)
# check new variables are created
names(KS13N.London)
attach (KS13N.London)
# Create a boxplot of all six count variables
boxplot(NoQual, Level1, Level2, Level3, Level4_5, Other,
names=c("NoQual", "Level1", "Level2", "Level3", "L4_5", "Other"),
xlab="Qualification", ylab="Count", col = "Bisque")
# Create a boxplot of all six percentage variables
boxplot(pNoQual, pLevel1, pLevel2, pLevel3, pLevel4_5, pOther,
names=c("pNoQual", "pLevel1", "pLevel2", "pLevel3", "pL4_5", "pOther"),
xlab="Qualification", ylab="Percentage", col = "Bisque")
# Create a boxplot of pNoQual by factor Sub_region
boxplot(pNoQual ~ Sub_region, xlab="No Qualification", ylab="Percentage", col = "Bisque")
# Create a boxplot of pNoQual by factor Sub_region
boxplot(pNoQual ~ Sub_region, xlab="No Qualification", ylab="Percentage", col = "Bisque")
# Create a boxplot of pNoQual by factor Borough
op <- par(mar = c(5, 8, 4, 2) + 0.1)
boxplot(pNoQual ~ Borough, xlab="Percentage No Qualification", ylab="",
col = "Bisque", horizontal = TRUE, las = 1, cex.axis = 0.7)
# Create a boxplot of pNoQual by factor Sub_region
boxplot(pNoQual ~ Sub_region, xlab="No Qualification", ylab="Percentage", col = "Bisque")
par(op)
# frequency histogram
hist(pNoQual)
hist(pNoQual, col = "light blue", border = "dark blue", freq = T, ylim = c(0,150),
xlab = "percentage of no qualifications", main = "Histogram")
# Add a rug plot
rug (pNoQual)
# probability density histogram
# a continuous version of the histogram with densities;
# specifies how the probability density is distributed over the range of values
hist(pNoQual, col = "light blue", border = "dark blue", freq = F, ylim = c(0,0.10),
xlab = "percentage of no qualifications", main = "Histogram")
# Add a rug plot
rug (pNoQual)
# Add a density curve
lines (density(sort(pNoQual)))
# Add a Normal curve
# seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),
#    length.out = NULL, along.with = NULL, ...)
xfit <- seq(from = min(pNoQual), to = max(pNoQual), by = 0.1)
yfit = dnorm(xfit, mean(pNoQual), sd(pNoQual))
lines(xfit, yfit, lty = "dotted")
rm(xfit, yfit)
# Add a legend
legend("topright", legend = c("Density curve", "Normal curve"),
lty = c("solid", "dotted"), cex = 0.7)
# Plot histogram and normal approximation
library(rcompanion)
plotNormalHistogram(pNoQual, main = "Histogram", xlab = "pNoQual")
# a scatterplot with pNoQual on the X axis and pLevel4_5 on the Y axis
plot(pNoQual, pLevel4_5)
plot(pNoQual, pLevel4_5, pch = 16, col = "red", cex = 0.5)
plot(pNoQual, pLevel4_5, pch = 16, col = "red", cex = 0.5)
# calculate correlations
cor(pNoQual, pLevel4_5, method = "spearman")
cor(pNoQual, pLevel4_5, method = "pearson")
# basic multivariate scatterplot matrix
pairs(~ pNoQual + pLevel1 + pLevel2 + pLevel3 + pLevel4_5,  data = KS13N.London,
main = "multivariate scatterplot matrix")
# select subset of data
London2 <- data.frame(pNoQual, pLevel1, pLevel2, pLevel3, pLevel4_5)
# add column names
colnames(London2) <- c("pNoQual", "pLevel1", "pLevel2", "pLevel3", "pLevel4_5")
# basic correlation matrix
cor(London2, method = "spearman")
London_cor <- cor(London2, method = "spearman")
round(London_cor, digits = 2)
# basic correlation matrix
cor(London2, method = "spearman")
London_cor <- cor(London2, method = "spearman")
round(London_cor, digits = 2)
detach (KS13N.London)
# remove all variables from the environment
rm(list=ls())
# Set working directory
setwd(dirname(file.choose()))
# load libraries
library(rgdal)
library(GISTools)
# load libraries
library(rgdal)
library(GISTools)
GISTools
GISTools
library(RColorBrewer)
# Read in the shapefile of london_polygon
london.polygon <- readOGR(".", "london_polygon")
plot(london.polygon, border = "black", col = "lightgrey")
# Read in the shapefile of london_point - "." means source is current directory
london.point <- readOGR(".", "london_point")
plot(london.point, add=TRUE, pch=16, col="red", cex=0.5)
# Read in the shapefile of thames
thames <- readOGR(".", "thames")
plot(thames, add=TRUE, border = "blue", col = "lightblue")
names(london.polygon@data)
names(london.point@data)
# Set colour and number of classes
shades <- auto.shading(london.polygon$DEPRIV, n = 5, cols = brewer.pal(5, "Oranges"))
# Draw the map polygons
choropleth(london.polygon, london.polygon$DEPRIV, shades)
install.packages('GIStools')
# Set colour and number of classes
shades <- auto.shading(london.polygon$DEPRIV, n = 5, cols = brewer.pal(5, "Oranges"))
# Draw the map polygons
choropleth(london.polygon, london.polygon$DEPRIV, shades)
plot(thames, add=TRUE, border = "blue", col = "lightblue")
# add a title
title("My First Map in R")
# add North arrow
north.arrow(506000, 160000, 1000)
# Add a legend
choro.legend(557000, 182000, shades, fmt = "%g", title = "Deprivation", cex=0.5)
# Draw a box around the map
box(which = "outer")
# Summarise point values
summary(london.point)
# Draw the map points
# cex values need to be adjusted for the size of point
plot(london.point, add=TRUE, pch=16, col="yellow", cex=(london.point$LIFE_MALE-74)/2)
library(readxl)
X04_KS13N_London <- read_excel("C:/Users/alenj/Desktop/DS006/Session_4/04_KS13N_London.csv")
`04_KS13N_London` <- read.csv("C:/Users/alenj/Desktop/DS006/Session_4/04_KS13N_London.csv", header=FALSE)
View(`04_KS13N_London`)
# Read in the shapefile of london_polygon
london.polygon <- readOGR(".", "london_polygon")
plot(london.polygon, border = "black", col = "lightgrey")
# Read in the shapefile of london_polygon
london.polygon <- readOGR(".", "london_polygon")
plot(london.polygon, border = "black", col = "lightgrey")
# load libraries
library(rgdal)
library(GISTools)
library(RColorBrewer)
# Read in the shapefile of london_polygon
london.polygon <- readOGR(".", "london_polygon")
plot(london.polygon, border = "black", col = "lightgrey")
# Read in the shapefile of london_point - "." means source is current directory
london.point <- readOGR(".", "london_point")
plot(london.point, add=TRUE, pch=16, col="red", cex=0.5)
# Read in the shapefile of thames
thames <- readOGR(".", "thames")
plot(thames, add=TRUE, border = "blue", col = "lightblue")
names(london.polygon@data)
# read in data from csv file
KS13N.London <- read.csv("04_KS13N_London.csv", stringsAsFactors = FALSE)
head(KS13N.London)    # Inspect top rows of the data
str(KS13N.London)
# make $Region and $Sub_region $Borough as factors
KS13N.London$Region <- factor(KS13N.London$Region)
KS13N.London$Sub_region <- factor(KS13N.London$Sub_region)
KS13N.London$Borough <- factor(KS13N.London$Borough)
str(KS13N.London)
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# Set working directory
setwd(dirname(file.choose()))
burglary.chi <- read.csv("06_burglary-chi.csv", stringsAsFactors = TRUE)
head(burglary.chi)  	# The top of the data
str(burglary.chi)     # structure of the data
# create a crosstable of district by entry point
myxtab <- xtabs(~ district + entry_pn, exclude = "", data=burglary.chi)
myxtab
# extract columns 'door' and 'window' into a new data frame
mytable <- as.data.frame(cbind(myxtab[,"Door"],myxtab[,"Window"]))
names(mytable)[1] <- "Door"
names(mytable)[2] <- "Window"
# print the table
mytable
# visualise
library(DescTools)
PlotMosaic(as.matrix(mytable), main = "district ~ entry point")
PlotMosaic(t(as.matrix(mytable)), main = "entry point ~ district")
PlotCirc(t(as.matrix(mytable)), main = "entry point -> district")
# simple chi-squared test
chisq.test(mytable)
# simple chi-squared with additional outputs
chisq_out <- chisq.test(mytable)
chisq_out
chisq_out$observed
chisq_out$expected
chisq_out$stdres
# chi-squared test using Monte Carlo simulation
chisq.test(mytable, correct = FALSE,
p = rep(1/length(mytable), length(mytable)), rescale.p = FALSE,
simulate.p.value = TRUE, B = 2000)
# calculate effect size
CramerV(mytable, conf.level = 0.95)
rm(myxtab, mytable, chisq_out)
# repeat chi-squared test for dwelling type by entry point
myxtab <- xtabs (~ dwell_ty + entry_pn, exclude = "", data=burglary.chi)
myxtab
# repeat chi-squared test for dwelling type by entry point
myxtab <- xtabs (~ dwell_ty + entry_pn, exclude = "", data=burglary.chi)
myxtab
# extract columns 'door' and 'window' into a new data frame
mytable <- as.data.frame(cbind(myxtab[,"Door"],myxtab[,"Window"]))
names(mytable)[1] <- "Door"
names(mytable)[2] <- "Window"
# print the table
mytable
# visualise
PlotMosaic(t(as.matrix(mytable)), main = "entry point ~ dwelling type")
PlotCirc(t(as.matrix(mytable)), main = "entry point -> dwelling type")
# simple chi-squared test
chisq.test(mytable)
# simple chi-squared with additional outputs
chisq_out <- chisq.test(mytable)
chisq_out$observed
chisq_out$expected
chisq_out$stdres
# chi-squared test using Monte Carlo simulation
chisq.test(mytable, correct = false,
p = rep(1/length(mytable), length(mytable)), rescale.p = FALSE,
simulate.p.value = TRUE, B = 2000)
# calculate effect size
CramerV(mytable, conf.level = 0.95)
rm(myxtab, mytable, chisq_out)
# read in data from csv file
KS13N.London <- read.csv("04_KS13N_London.csv", stringsAsFactors = FALSE)
head(KS13N.London)    # Inspect top rows of the data
str(KS13N.London)
# make $Region and $Sub_region $Borough as factors
KS13N.London$Region <- factor(KS13N.London$Region)
KS13N.London$Sub_region <- factor(KS13N.London$Sub_region)
KS13N.London$Borough <- factor(KS13N.London$Borough)
str(KS13N.London)
# boxplot for variable of "P16plus"
# boxplot(x, main,xlab, ylab)
boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
# label outliers
boxdata <- boxplot(KS13N.London$P16plus, xlab="Population 16plus", ylab="Count")
#for each outlier in boxdata
for(i in 1:length(boxdata$group)){
#add text to the boxplot
text(boxdata$group[i], boxdata$out[i],
which(KS13N.London$P16plus==boxdata$out[i]),pos=4, cex=1)}
boxplot(KS13N.London$P16plus)
library(TeachingDemos)
boxplot.with.outlier.label(KS13N.London$P16plus, seq_along(KS13N.London$P16plus))
# inspect outliers
KS13N.London[20,]
KS13N.London[92,]
# boxplot for variable of "P16plus" by factor Sub_region
boxplot(KS13N.London$P16plus ~ KS13N.London$Sub_region, xlab="Population 16plus", ylab="Count")
# boxplot for variable of "P16plus" by factor Borough
boxplot(KS13N.London$P16plus ~ KS13N.London$Borough, xlab="Population 16plus", ylab="Count")
# can't read names, so change the margin on the left (no. 2)
# default is c(5, 4, 4, 2) + 0.1
# and shrink text size so we don't need a huge margin
op <- par(mar = c(5, 8, 4, 2) + 0.1)
boxplot(KS13N.London$P16plus ~ KS13N.London$Borough, xlab=" Count of Population 16plus", ylab="",
horizontal = TRUE, las = 1, cex.axis = 0.7, col = "grey")
# reset the plotting parameters
par(op)
# Mean, Std. deviation, Maximum and Minimum of "P16plus"
summary(KS13N.London$P16plus)
summary(KS13N.London)
# Summary statistics printed separately
mean(KS13N.London$P16plus)
sd (KS13N.London$P16plus)
max(KS13N.London$P16plus)
min(KS13N.London$P16plus)
# Create percentage of population (p16plus) variables
KS13N.London <- within (KS13N.London, pNoQual <- (NoQual / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel1 <- (Level1 / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel2 <- (Level2 / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel3 <- (Level3 / P16plus)*100)
KS13N.London <- within (KS13N.London, pLevel4_5 <- (Level4_5 / P16plus)*100)
KS13N.London <- within (KS13N.London, pOther <- (Other / P16plus)*100)
# check new variables are created
names(KS13N.London)
attach (KS13N.London)
# Create a boxplot of all six count variables
boxplot(NoQual, Level1, Level2, Level3, Level4_5, Other,
names=c("NoQual", "Level1", "Level2", "Level3", "L4_5", "Other"),
xlab="Qualification", ylab="Count", col = "Bisque")
# Create a boxplot of all six percentage variables
boxplot(pNoQual, pLevel1, pLevel2, pLevel3, pLevel4_5, pOther,
names=c("pNoQual", "pLevel1", "pLevel2", "pLevel3", "pL4_5", "pOther"),
xlab="Qualification", ylab="Percentage", col = "Bisque")
# Create a boxplot of pNoQual by factor Sub_region
boxplot(pNoQual ~ Sub_region, xlab="No Qualification", ylab="Percentage", col = "Bisque")
# Create a boxplot of pNoQual by factor Borough
op <- par(mar = c(5, 8, 4, 2) + 0.1)
boxplot(pNoQual ~ Borough, xlab="Percentage No Qualification", ylab="",
col = "Bisque", horizontal = TRUE, las = 1, cex.axis = 0.7)
par(op)
# frequency histogram
hist(pNoQual)
hist(pNoQual, col = "light blue", border = "dark blue", freq = T, ylim = c(0,150),
xlab = "percentage of no qualifications", main = "Histogram")
# Add a rug plot
rug (pNoQual)
# probability density histogram
# a continuous version of the histogram with densities;
# specifies how the probability density is distributed over the range of values
hist(pNoQual, col = "light blue", border = "dark blue", freq = F, ylim = c(0,0.10),
xlab = "percentage of no qualifications", main = "Histogram")
# Add a rug plot
rug (pNoQual)
# Add a density curve
lines (density(sort(pNoQual)))
# Add a Normal curve
# seq(from = 1, to = 1, by = ((to - from)/(length.out - 1)),
#    length.out = NULL, along.with = NULL, ...)
xfit <- seq(from = min(pNoQual), to = max(pNoQual), by = 0.1)
yfit = dnorm(xfit, mean(pNoQual), sd(pNoQual))
lines(xfit, yfit, lty = "dotted")
rm(xfit, yfit)
# Add a legend
legend("topright", legend = c("Density curve", "Normal curve"),
lty = c("solid", "dotted"), cex = 0.7)
# Plot histogram and normal approximation
library(rcompanion)
plotNormalHistogram(pNoQual, main = "Histogram", xlab = "pNoQual")
# a scatterplot with pNoQual on the X axis and pLevel4_5 on the Y axis
plot(pNoQual, pLevel4_5)
plot(pNoQual, pLevel4_5, pch = 16, col = "red", cex = 0.5)
# calculate correlations
cor(pNoQual, pLevel4_5, method = "spearman")
cor(pNoQual, pLevel4_5, method = "pearson")
# basic multivariate scatterplot matrix
pairs(~ pNoQual + pLevel1 + pLevel2 + pLevel3 + pLevel4_5,  data = KS13N.London,
main = "multivariate scatterplot matrix")
# select subset of data
London2 <- data.frame(pNoQual, pLevel1, pLevel2, pLevel3, pLevel4_5)
# add column names
colnames(London2) <- c("pNoQual", "pLevel1", "pLevel2", "pLevel3", "pLevel4_5")
# basic correlation matrix
cor(London2, method = "spearman")
London_cor <- cor(London2, method = "spearman")
round(London_cor, digits = 2)
detach (KS13N.London)
# remove all variables from the environment
rm(list=ls())
setwd("~/Own Projects/Dissertation")
setwd("~/Own Projects/Dissertation")
df <- read.csv("Employee_Attrition.csv")
df.head()
df <- read.csv("Employee_Attrition.csv")
df
df <- read.csv("Employee_Attrition.csv")
head(df, n = 5)
cor_matrix <- cor(df)
print(cor_matrix)
cor_matrix <- cor(df)
str(df)
dim(df)
is.na(df)
dataset<-na.omit(df)
#Correlation Matrix
dataset_cor <- cor(dataset, use = "pairwise.complete.obs", method = "spearman")
View(df)
View(df)
View(dataset)
View(dataset)
for(i in 1:ncol(dataset)){
dataset[,i] <- as.factor(dataset[,i])
}
View(dataset)
View(dataset)
df_factor <- for(i in 1:ncol(dataset)){
dataset[,i] <- as.factor(dataset[,i])
}
df_factor <- as.data.frame(lapply(dataset, as.factor))
View(df_factor)
View(df_factor)
dataset<-na.omit(df)
df_factor <- as.data.frame(lapply(dataset, as.factor))
View(df_factor)
View(df_factor)
library(dplyr)
View(dataset)
View(dataset)
df %>% mutate_at(c('Attrition'), as.factor)
View(df)
View(df)
df <- read.csv("Employee_Attrition.csv")
head(df, n = 5)
str(df)
dim(df)
dataset<-na.omit(df)
library(dplyr)
dataset <- dataset %>% mutate_if(is.character, as.factor)
View(dataset)
View(dataset)
#Correlation Matrix
dataset_cor <- cor(dataset, use = "pairwise.complete.obs", method = "spearman")
str(dataset)
dataset <- dataset %>%mutate_at(vars(Attrition), factor)
View(dataset)
View(dataset)
library(dplyr)
dataset <- mutate_if(dataset, is.character, as.factor)
str(dataset)
View(dataset)
View(dataset)
dataset$Attrition <- as.factor(dataset$Attrition)
View(dataset)
View(dataset)
df <- read.csv("Employee_Attrition.csv")
head(df, n = 5)
str(df)
dim(df)
dataset<-na.omit(df)
library(dplyr)
dataset$Attrition <- as.factor(dataset$Attrition)
dataset$Attrition
as.factor(dataset$Attrition)
col <- as.factor(dataset$Attrition)
col <- as.dataframe(as.factor(dataset$Attrition))
col <- as.dataset(as.factor(dataset$Attrition))
col <- as.data.frame(as.factor(dataset$Attrition))
View(col)
View(col)
